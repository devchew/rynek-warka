---
import { Image } from 'astro:assets';
import fs from 'node:fs';
import path from 'node:path';

interface Props {
  limit?: number;
  showSeeMore?: boolean;
}

const { limit, showSeeMore = false } = Astro.props;

// Get all JPG files from the public/galeria directory
const galleryPath = path.join(process.cwd(), 'public', 'galeria');
let imageFiles: string[] = [];

try {
  const files = fs.readdirSync(galleryPath);
  imageFiles = files.filter(file => /\.(jpg|jpeg|JPG|JPEG)$/i.test(file))
    .map(file => `/galeria/${file}`);
  
  // Apply limit if provided
  if (limit) {
    imageFiles = imageFiles.slice(0, limit);
  }
} catch (error) {
  console.error('Error reading gallery directory:', error);
}

// Get all images for the lightbox
const allImages = imageFiles;
---

<div class="gallery-container">
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
    {imageFiles.map((imagePath, index) => (
      <div 
        class="group overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-shadow cursor-pointer gallery-item"
        data-index={index}
        data-src={imagePath}
      >
        <div class="relative aspect-square overflow-hidden">
          <img 
            src={imagePath} 
            alt="Gallery Image" 
            loading="lazy"
            class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
          />
        </div>
      </div>
    ))}
  </div>
  
  {showSeeMore && (
    <div class="mt-8 text-center">
      <a href="/galeria" class="inline-block px-6 py-3 bg-amber-800 text-white rounded-lg hover:bg-amber-700 transition-colors">
        Zobacz wiÄ™cej
      </a>
    </div>
  )}
  <!-- Lightbox -->
  <div class="lightbox fixed inset-0 bg-black bg-opacity-90 z-50 hidden">
    <button class="absolute top-4 right-6 text-white text-4xl z-10 hover:text-gray-300">&times;</button>    <button class="prev absolute left-2 md:left-4 top-1/2 -translate-y-1/2 text-white text-3xl md:text-5xl z-10 hover:text-gray-300">&lt;</button>
    <button class="next absolute right-2 md:right-4 top-1/2 -translate-y-1/2 text-white text-3xl md:text-5xl z-10 hover:text-gray-300">&gt;</button>
    <div class="lightbox-content w-full h-full flex items-center justify-center">
      <img src="" alt="Lightbox Image" class="max-h-[90vh] max-w-[90vw]" />
    </div>
  </div>
</div>

<script>
  // Set up lightbox functionality
  const galleryItems = document.querySelectorAll('.gallery-item');
  const lightbox = document.querySelector('.lightbox');
  const lightboxImg = lightbox?.querySelector('img');
  const closeBtn = lightbox?.querySelector('button');
  const prevBtn = lightbox?.querySelector('.prev');
  const nextBtn = lightbox?.querySelector('.next');
  
  let currentIndex = 0;
  const images = Array.from(galleryItems).map(item => item.getAttribute('data-src'));
  
  galleryItems.forEach((item) => {
    item.addEventListener('click', () => {
      currentIndex = parseInt(item.getAttribute('data-index') || '0');
      openLightbox(currentIndex);
    });
  });
  
  closeBtn?.addEventListener('click', closeLightbox);
  
  prevBtn?.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + images.length) % images.length;
    updateLightboxImage();
  });
  
  nextBtn?.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % images.length;
    updateLightboxImage();
  });
  
  // Close lightbox when clicking outside the image
  lightbox?.addEventListener('click', (e) => {
    if (e.target === lightbox) {
      closeLightbox();
    }
  });
  
  // Keyboard navigation
  document.addEventListener('keydown', (e) => {
    if (!lightbox?.classList.contains('hidden')) {
      if (e.key === 'Escape') {
        closeLightbox();
      } else if (e.key === 'ArrowLeft') {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateLightboxImage();
      } else if (e.key === 'ArrowRight') {
        currentIndex = (currentIndex + 1) % images.length;
        updateLightboxImage();
      }
    }
  });
    function openLightbox(index: number) {
    currentIndex = index;
    updateLightboxImage();
    lightbox?.classList.remove('hidden');
    lightbox?.classList.add('flex', 'items-center', 'justify-center');
    document.body.style.overflow = 'hidden'; // Prevent scrolling when lightbox is open
  }
  
  function closeLightbox() {
    lightbox?.classList.add('hidden');
    lightbox?.classList.remove('flex', 'items-center', 'justify-center');
    document.body.style.overflow = ''; // Restore scrolling
  }
  
  function updateLightboxImage() {
    if (lightboxImg) {
      const imgSrc = images[currentIndex];
      lightboxImg.src = imgSrc || '';
    }
  }
</script>
